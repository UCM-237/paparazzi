<!DOCTYPE flight_plan SYSTEM "../flight_plan.dtd">

<!--<flight_plan alt="660" ground_alt="650" lat0="40.3756082" lon0="-3.7040765" max_dist_from_home="1500" name="Rover Steering" security_height="0.3">
  <header>-->
<flight_plan alt="660" ground_alt="650" lat0="39.78917" lon0="-4.08694" max_dist_from_home="2500" name="Rover Steering" security_height="0.3">
  <header>

</header>
  <waypoints>
    <waypoint name="HOME" x="0" y="0"/>
    <waypoint name="STDBY" x="1" y="1"/>
    <waypoint name="ELLIPSE" x="-10.3" y="8.9"/>
    <waypoint name="P1" x="-2" y="-4"/>
    <waypoint name="P2" x="2" y="-4"/>
    
    <!-- Codified in geographic coordinates -->
    <waypoint name="BZ0" lat="40.3756184" lon="-3.7041719"/>
    <waypoint name="BZ1" lat="40.3758668" lon="-3.7043664"/>
    <waypoint name="BZ2" lat="40.3759025" lon="-3.7048757"/>
    <waypoint name="BZ3" lat="40.3757347" lon="-3.7050531"/>
    <waypoint name="BZ4" lat="40.3754373" lon="-3.7053716"/>
    <waypoint name="BZ5" lat="40.3753969" lon="-3.7056233"/>
    <waypoint name="BZ6" lat="40.3753658" lon="-3.7058680"/>
    <waypoint name="BZ7" lat="40.3754509" lon="-3.7060880"/>
    <waypoint name="BZ8" lat="40.3756093" lon="-3.7061074"/>
    <waypoint name="BZ9" lat="40.3755495" lon="-3.7064696"/>
    <waypoint name="BZ10" lat="40.3752718" lon="-3.7063395"/>
    <waypoint name="BZ11" lat="40.3751360" lon="-3.7060069"/>
    <!--waypoint name="BZ12" lat="" lon=""/-->
    <!--***************************************-->
    
    <waypoint name="_S1" x="3" y="4"/>
    <waypoint name="_S2" x="3" y="-4"/>
    <waypoint name="_S3" x="-3" y="-4"/>
    <waypoint name="_S4" x="-3" y="4"/>
    <waypoint name="_N1" x="1500" y="1500"/>
    <waypoint name="_N2" x="1500" y="-1500"/>
    <waypoint name="_N3" x="-1500" y="-1500"/>
    <waypoint name="_N4" x="-1500" y="1500"/>
    <waypoint name="L0" x="-27.7" y="3.3"/>
    <waypoint name="L1" x="-55.8" y="4.0"/>
    <waypoint name="L2" x="-61.5" y="17.0"/>
    <waypoint name="L3" x="-68.7" y="22.7"/>
    <waypoint name="L4" x="-49.8" y="29.0"/>
    <waypoint name="L5" x="-35.0" y="33.9"/>
    <waypoint name="L6" x="-23.6" y="18.0"/>
  </waypoints>
  <sectors>
    <sector color="red" name="Net">
      <corner name="_N1"/>
      <corner name="_N2"/>
      <corner name="_N3"/>
      <corner name="_N4"/>
    </sector>
  </sectors>
  <variables>
    <variable init="5.0" max="20.0" min="1.0" step="1.0" var="a_stb"/>
    <variable init="5.0" max="20.0" min="1.0" step="1.0" var="b_stb"/>
	</variables>
	
	<!-- Global exceptions for the boat-->
	<!--
	<exceptions>
		<exception cond="(12.1 > PowerVoltage()) @AND (GpsFixValid())" deroute="line_to_HOME"/>
	</exceptions>
	-->
	
  <blocks>
    <block name="Wait GPS" strip_icon="gps.png">
      <call_once fun="NavKillThrottle()"/>
      <while cond="!GpsFixValid()"/>
    </block>
    
    <block name="Geo init" strip_icon="googleearth.png">
      <while cond="LessThan(NavBlockTime(), 10)"/>
      <call_once fun="NavSetGroundReferenceHere()"/>
      <call_once fun="NavSetAltitudeReferenceHere()"/>
    </block>
    
    <block name="Start Engine" strip_icon="on.png">
      <while cond="LessThan(NavBlockTime(), 1)"/>
      <call_once fun="autopilot_set_motors_on(TRUE)"/>
    </block>
    
    <block name="Standby" strip_button="Standby" strip_icon="home.png">
      <call fun="gvf_ellipse_wp(WP_STDBY, a_stb, b_stb, 0)"/>
		  <!--exception cond="(12.1 > PowerVoltage()) @AND (GpsFixValid())" deroute="line_to_HOME"/-->
    </block>
    
    <block name="line_to_HOME" strip_icon="home_drop.png">
      <call fun="gvf_segment_XY1_XY2(GetPosX(), GetPosY(), 0.f, 0.f)"/>
      <exception cond="! InsideNet(GetPosX(), GetPosY())" deroute="Standby"/>
		  <!--exception cond="(12.1 > PowerVoltage()) @AND (GpsFixValid())" deroute="line_to_HOME"/-->
    </block>
    
    <block name="ellipse_wp" strip_icon="oval.png">
      <call fun="gvf_ellipse_wp(WP_ELLIPSE, gvf_ellipse_par.a, gvf_ellipse_par.b, gvf_ellipse_par.alpha)"/>
      <exception cond="! InsideNet(GetPosX(), GetPosY())" deroute="Standby"/>
		  <exception cond="(12.1 > PowerVoltage()) @AND (GpsFixValid())" deroute="line_to_HOME"/>
		  <!--<exception cond="stage_time>300" deroute="line_to_HOME"/--> <!-- Tras 300 segundos se va a casa (testing) -->
    </block>
    
    <block name="line_P1_P2" strip_icon="line.png">
      <call fun="gvf_line_wp1_wp2(WP_P1, WP_P2)"/>
      <exception cond="! InsideNet(GetPosX(), GetPosY())" deroute="Standby"/>
		  <!--exception cond="(12.1 > PowerVoltage()) @AND (GpsFixValid())" deroute="line_to_HOME"/-->
    </block>
    
    <block name="segment_turn_P1_P2" strip_icon="line.png">
      <call fun="gvf_segment_loop_wp1_wp2(WP_P1, WP_P2, gvf_segment_par.d1, gvf_segment_par.d2)"/>
      <exception cond="! InsideNet(GetPosX(), GetPosY())" deroute="Standby"/>
		  <!--exception cond="(12.1 > PowerVoltage()) @AND (GpsFixValid())" deroute="line_to_HOME"/-->
    </block>
    
    <block name="sin_p1_p2" strip_icon="line_drop.png">
      <call fun="gvf_sin_wp1_wp2(WP_P1, WP_P2, gvf_sin_par.w, gvf_sin_par.off, gvf_sin_par.A)"/>
      <exception cond="! InsideNet(GetPosX(), GetPosY())" deroute="Standby"/>
		  <!--exception cond="(12.1 > PowerVoltage()) @AND (GpsFixValid())" deroute="line_to_HOME"/-->
    </block>
    
    <block name="line_array" strip_icon="line.png">
      <call fun="gvf_lines_array_wp_v2(WP_L0, WP_L1, WP_L2, WP_L3, WP_L4, WP_L5, WP_L6, gvf_segment_par.d1, gvf_segment_par.d2)"/>
      <exception cond="! InsideNet(GetPosX(), GetPosY())" deroute="Standby"/>
		  <!--exception cond="(12.1 > PowerVoltage()) @AND (GpsFixValid())" deroute="line_to_HOME"/-->
    </block>
    
    <block name="gvf_bezier_bare">
      <call fun="gvf_parametric_bare_2D_bezier_wp(WP_BZ0)"/>
      <exception cond="! InsideNet(GetPosX(), GetPosY())" deroute="Standby"/>
		  <!--exception cond="(12.1 > PowerVoltage()) @AND (GpsFixValid())" deroute="line_to_HOME"/-->
    </block>
    
    <!-- TODO: Take distance to last point of BÃ©zier curve and return when distance < epsilon (create function in gvf_param_bare or use
    			a variable of a struct) and then create a new block that returns to home when the distance to the last point is below epsilon
    -->
    <block name="gvf_quintic_bezier_bare">
      <call fun="gvf_parametric_bare_2D_quintic_bezier_wp(WP_BZ0)"/>
      <exception cond="! InsideNet(GetPosX(), GetPosY())" deroute="Standby"/>
		  <!--exception cond="(12.1 > PowerVoltage()) @AND (GpsFixValid())" deroute="line_to_HOME"/-->
    </block>
  </blocks>
</flight_plan>
